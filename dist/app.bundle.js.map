{"version":3,"sources":["webpack:///./app/index.js","webpack:///./app/containers/index.js","webpack:///./app/containers/app.js","webpack:///./app/common.js","webpack:///./app/config.js","webpack:///./app/components/index.js","webpack:///./app/components/cell.js","webpack:///./app/components/row.js","webpack:///./app/components/board.js"],"names":["React","ReactDOM","render","document","getElementById","default","R","getDefaultBoardData","map","id","index","mark","bgColor","range","boardSize","getDefaultState","boardData","gameFinished","usersTurn","userWon","isEmptyCell","propEq","isMarkedCell","complement","cellsToMarkStr","compose","join","pluck","createClass","state","gameOverMessage","margin","padding","handlePlaceMarkTrigger","display","verticalAlign","marginLeft","fontSize","handleNewGameClick","marginTop","getInitialState","savedState","JSON","parse","localStorage","getItem","componentDidMount","triggerComputerPlay","componentWillUpdate","nextProps","nextState","setItem","stringify","placeMark","adjust","assoc","setState","userIsNext","computerIsNext","getCellById","cellId","getEmptyCells","filter","hasNoEmptyCells","all","isUserWon","isSomeoneWon","isComputerWon","wonPattern","RegExp","isWinningSet","test","markStr","parts","getBoardDataParts","any","getMainDiagonal","cell","getAntidiagonal","dropLast","drop","rows","cols","mainDiagonal","antidiagonal","concat","finishGame","userMarks","computerMarks","emptyCells","length","targetCell","setTimeout","computerWon","noEmptyCells","randomIntBetween","min","max","Math","floor","random","getFlatMatrixRows","splitEvery","getFlatMatrixCols","size","data","reduce","acc","push","BOARD_SIZE","WIN_MARKS_COUNT","CELL_BG_COLOR_DEFAULT","CELL_BG_COLOR_WON","CELL_MARK_DEFAULT","CELL_MARK_USER","CELL_MARK_COMP","COMPUTER_SPEED","LOCAL_STORAGE_KEY","Cell","props","boxSizing","width","height","backgroundColor","border","lineHeight","textAlign","textTransform","propTypes","PropTypes","number","isRequired","string","defaultProps","Row","createCellNode","rowSize","cellData","createCellNodes","cells","arrayOf","shape","createRowNodes","rowData","zipWith","onPlaceMarkTrigger","func","getDefaultProps","handleClick","event","targetId","target","Number","match"],"mappings":"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","file":"dist\\app.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { App } from './containers';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('container')\r\n);\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/index.js\n **/","export { default as App } from './app';\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/containers/index.js\n **/","import * as React from 'react';\r\nimport * as R from 'ramda';\r\nimport { randomIntBetween, getFlatMatrixRows, getFlatMatrixCols } from '../common';\r\nimport {\r\n    BOARD_SIZE,\r\n    CELL_BG_COLOR_DEFAULT,\r\n    CELL_MARK_DEFAULT,\r\n    CELL_MARK_USER,\r\n    CELL_MARK_COMP,\r\n    COMPUTER_SPEED,\r\n    LOCAL_STORAGE_KEY,\r\n    WIN_MARKS_COUNT\r\n  } from '../config';\r\nimport { Board } from '../components';\r\n\r\nconst getDefaultBoardData = boardSize =>\r\n  R.map(\r\n    index => ({\r\n      id: index,\r\n      mark: CELL_MARK_DEFAULT,\r\n      bgColor: CELL_BG_COLOR_DEFAULT,\r\n    }),\r\n    R.range(0, boardSize * boardSize)\r\n  );\r\n\r\nconst getDefaultState = () => ({\r\n  boardData: getDefaultBoardData(BOARD_SIZE),\r\n  gameFinished: false,\r\n  usersTurn: true,\r\n  userWon: false,\r\n});\r\n\r\nconst isEmptyCell = R.propEq('mark', CELL_MARK_DEFAULT);\r\nconst isMarkedCell = R.complement(isEmptyCell);\r\n\r\nconst cellsToMarkStr = R.compose(\r\n  R.join(''),\r\n  R.pluck('mark')\r\n);\r\n\r\nexport default React.createClass({\r\n  render() {\r\n    const { boardData, userWon, gameFinished } = this.state;\r\n    const gameOverMessage = gameFinished ? (userWon ? 'Congrats!' : 'Next Time') : '';\r\n\r\n    return (\r\n      <div\r\n          className=\"app-container\"\r\n          style={{ margin: 0, padding: 0 }}>\r\n\r\n        <Board size={BOARD_SIZE} data={boardData} onPlaceMarkTrigger={this.handlePlaceMarkTrigger} />\r\n\r\n        <div\r\n            style={{\r\n              display: 'inline-block',\r\n              verticalAlign: 'top',\r\n              marginLeft: '2vw',\r\n            }}>\r\n          <button\r\n              className=\"new-game-btn\"\r\n              style={{\r\n                margin: 0,\r\n                padding: 0,\r\n                fontSize: '4vw',\r\n              }}\r\n              onClick={this.handleNewGameClick}>\r\n            New Game\r\n          </button>\r\n          <p\r\n              style={{\r\n                fontSize: '6vw',\r\n                margin: 0,\r\n                padding: 0,\r\n                marginTop: '11.5vw',\r\n                marginLeft: '15.5vw',\r\n              }}>\r\n            {gameOverMessage}\r\n          </p>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  },\r\n\r\n  getInitialState() {\r\n    const savedState = JSON.parse(\r\n      localStorage.getItem(LOCAL_STORAGE_KEY)\r\n    );\r\n\r\n    return savedState ? savedState : getDefaultState();\r\n  },\r\n\r\n  componentDidMount() {\r\n    const { usersTurn } = this.state;\r\n    if (!usersTurn) {\r\n      this.triggerComputerPlay();\r\n    }\r\n  },\r\n\r\n  componentWillUpdate(nextProps, nextState) {\r\n    localStorage.setItem(\r\n      LOCAL_STORAGE_KEY,\r\n      JSON.stringify(nextState)\r\n    );\r\n  },\r\n\r\n  placeMark(index, mark) {\r\n    const boardData = R.adjust(\r\n      R.assoc('mark', mark),\r\n      index,\r\n      this.state.boardData\r\n    );\r\n\r\n    this.setState({ boardData });\r\n  },\r\n\r\n  userIsNext() {\r\n    this.setState({ usersTurn: true });\r\n  },\r\n\r\n  computerIsNext() {\r\n    this.setState({ usersTurn: false });\r\n  },\r\n\r\n  getCellById(cellId) {\r\n    // INFO cellId is same as the index of the cell in boardData, so no need for extra find\r\n    return this.state.boardData[cellId];\r\n  },\r\n\r\n  getEmptyCells() {\r\n    return R.filter(isEmptyCell, this.state.boardData);\r\n  },\r\n\r\n  hasNoEmptyCells() {\r\n    return R.all(isMarkedCell, this.state.boardData);\r\n  },\r\n\r\n  isUserWon() {\r\n    return this.isSomeoneWon(CELL_MARK_USER);\r\n  },\r\n\r\n  isComputerWon() {\r\n    return this.isSomeoneWon(CELL_MARK_COMP);\r\n  },\r\n\r\n  // TODO can be improved eg.: check only the cases around (row, col, main/antidiagonal)\r\n  //  the last place someone put a mark\r\n  isSomeoneWon(mark) {\r\n    const wonPattern = new RegExp(`${mark}{${WIN_MARKS_COUNT}}`);\r\n    const isWinningSet = R.compose(\r\n      markStr => wonPattern.test(markStr),\r\n      cellsToMarkStr,\r\n    );\r\n\r\n    const parts = this.getBoardDataParts();\r\n    return R.any(isWinningSet, parts);\r\n  },\r\n\r\n  getBoardDataParts() {\r\n    const { boardData } = this.state;\r\n\r\n    // TODO extract and/or implement a general\r\n    const getMainDiagonal = R.filter(\r\n      cell => cell.id % (BOARD_SIZE + 1) == 0\r\n    );\r\n\r\n    // TODO extract and/or implement a general\r\n    const getAntidiagonal = R.compose(\r\n      R.filter(cell => cell.id % (BOARD_SIZE - 1) == 0),\r\n      R.dropLast(BOARD_SIZE - 1),\r\n      R.drop(BOARD_SIZE - 1)\r\n    );\r\n\r\n    const rows = getFlatMatrixRows(BOARD_SIZE, boardData);\r\n    const cols = getFlatMatrixCols(BOARD_SIZE, boardData);\r\n    const mainDiagonal = getMainDiagonal(boardData);\r\n    const antidiagonal = getAntidiagonal(boardData);\r\n\r\n    return R.concat(\r\n      R.concat(rows, cols),\r\n      R.concat([mainDiagonal], [antidiagonal])\r\n    );\r\n  },\r\n\r\n  finishGame() {\r\n    if (!this.state.gameFinished) {\r\n      this.setState({\r\n        gameFinished: true,\r\n        userWon: this.isUserWon(),\r\n      });\r\n    }\r\n  },\r\n\r\n  userMarks(cellId) {\r\n    this.placeMark(cellId, CELL_MARK_USER);\r\n  },\r\n\r\n  computerMarks() {\r\n    const emptyCells = this.getEmptyCells();\r\n    if (emptyCells.length == 0) {\r\n      return;\r\n    }\r\n\r\n    const index = randomIntBetween(0, emptyCells.length);\r\n    const targetCell = emptyCells[index];\r\n    this.placeMark(targetCell.id, CELL_MARK_COMP);\r\n  },\r\n\r\n  triggerComputerPlay() {\r\n    setTimeout(() => {\r\n      const userWon = this.isUserWon();\r\n      const computerWon = this.isComputerWon();\r\n      const noEmptyCells = this.hasNoEmptyCells();\r\n\r\n      if (noEmptyCells || userWon || computerWon) {\r\n        this.finishGame();\r\n        return;\r\n      }\r\n\r\n      this.computerMarks();\r\n      this.userIsNext();\r\n\r\n      // TODO temporary hack to finish the game when comp wins\r\n      this.handlePlaceMarkTrigger();\r\n    }, COMPUTER_SPEED);\r\n  },\r\n\r\n  handlePlaceMarkTrigger(cellId) {\r\n    const userWon = this.isUserWon();\r\n    const computerWon = this.isComputerWon();\r\n    const noEmptyCells = this.hasNoEmptyCells();\r\n\r\n    if (noEmptyCells || userWon || computerWon) {\r\n      this.finishGame();\r\n      return;\r\n    }\r\n\r\n    // TODO temporary hack to support finish the game when comp wins\r\n    if (cellId == null) {\r\n      return;\r\n    }\r\n\r\n    const { usersTurn } = this.state;\r\n    const cell = this.getCellById(cellId);\r\n\r\n    if (usersTurn && isEmptyCell(cell)) {\r\n      this.userMarks(cellId);\r\n      this.computerIsNext();\r\n      this.triggerComputerPlay();\r\n    }\r\n  },\r\n\r\n  handleNewGameClick() {\r\n    this.setState(getDefaultState());\r\n  },\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/containers/app.js\n **/","import * as R from 'ramda';\r\n\r\nexport const randomIntBetween = (min, max) =>\r\n  Math.floor(\r\n    Math.random() * (max - min)\r\n  ) + min;\r\n\r\nexport const getFlatMatrixRows = R.splitEvery;\r\n\r\nexport const getFlatMatrixCols = (size, data) => {\r\n  // TODO simpler solution?\r\n  const cols = R.compose(\r\n    R.map(() => []),\r\n    R.range\r\n  )(0, size);\r\n\r\n  R.reduce((acc, cell) => {\r\n    acc[cell.id % size].push(cell);\r\n    return acc;\r\n  })(cols, data);\r\n\r\n  return cols;\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/common.js\n **/","export const BOARD_SIZE = 3;\r\nexport const WIN_MARKS_COUNT = BOARD_SIZE; // different value not supported right now\r\nexport const CELL_BG_COLOR_DEFAULT = '#fff';\r\nexport const CELL_BG_COLOR_WON = '#0f0';\r\nexport const CELL_MARK_DEFAULT = '';\r\nexport const CELL_MARK_USER = 'X';\r\nexport const CELL_MARK_COMP = 'O';\r\nexport const COMPUTER_SPEED = 500;\r\nexport const LOCAL_STORAGE_KEY = 'tic-tac-toe-forever';\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/config.js\n **/","export { default as Cell } from './cell';\r\nexport { default as Row } from './row';\r\nexport { default as Board } from './board';\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/components/index.js\n **/","import * as React from 'react';\r\n\r\nexport default function Cell(props) {\r\n  const { id, length, mark, bgColor } = props;\r\n\r\n  return (\r\n    <div\r\n        id={`cell-${id}`}\r\n        className=\"cell-container\"\r\n        style={{\r\n          boxSizing: 'border-box',\r\n          margin: 0,\r\n          padding: 0,\r\n          display: 'inline-block',\r\n          width: length,\r\n          height: length,\r\n          backgroundColor: bgColor,\r\n          border: '1px solid #555',\r\n          verticalAlign: 'middle',\r\n          lineHeight: length,\r\n          textAlign: 'center',\r\n          textTransform: 'uppercase',\r\n          fontSize: length,\r\n        }}>\r\n      {mark}\r\n    </div>\r\n  );\r\n}\r\n\r\nCell.propTypes = {\r\n  id: React.PropTypes.number.isRequired,\r\n  length: React.PropTypes.string.isRequired,\r\n  mark: React.PropTypes.string.isRequired,\r\n  bgColor: React.PropTypes.string.isRequired,\r\n};\r\n\r\nCell.defaultProps = {\r\n  mark: '',\r\n  bgColor: '#fff',\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/components/cell.js\n **/","import * as React from 'react';\r\nimport * as R from 'ramda';\r\nimport Cell from './cell';\r\n\r\nconst createCellNode = cellData => {\r\n  const { rowSize, cell } = cellData;\r\n\r\n  return (\r\n    <Cell\r\n      key={cell.id}\r\n      id={cell.id}\r\n      length={`calc(40vw / ${rowSize})`}\r\n      mark={cell.mark}\r\n      bgColor={cell.bgColor}\r\n    />\r\n  );\r\n};\r\n\r\nconst createCellNodes = (rowSize, cells) => (\r\n  R.compose(\r\n    R.map(createCellNode),\r\n    R.map(cell => ({ rowSize, cell }))\r\n  )(cells)\r\n);\r\n\r\nexport default function Row(props) {\r\n  const { size, cells } = props;\r\n\r\n  return (\r\n    <div\r\n        className=\"row-container\"\r\n        style={{\r\n          boxSizing: 'border-box',\r\n          margin: 0,\r\n          padding: 0,\r\n          border: 'none',\r\n        }}>\r\n      {createCellNodes(size, cells)}\r\n    </div>\r\n  );\r\n}\r\n\r\nRow.propTypes = {\r\n  size: React.PropTypes.number.isRequired,\r\n  cells: React.PropTypes.arrayOf(\r\n    React.PropTypes.shape({\r\n      id: React.PropTypes.number.isRequired,\r\n      mark: React.PropTypes.string.isRequired,\r\n      bgColor: React.PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/components/row.js\n **/","import * as React from 'react';\r\nimport * as R from 'ramda';\r\nimport Row from './row';\r\n\r\nconst createRowNodes = (boardSize, data) => (\r\n  R.compose(\r\n    R.map(\r\n      rowData => <Row key={rowData.id} size={rowData.boardSize} cells={rowData.cells} />\r\n    ),\r\n    R.zipWith(\r\n      (index, cells) => ({ id: index, boardSize, cells }),\r\n      R.range(0, boardSize * boardSize)\r\n    ),\r\n    R.splitEvery,\r\n  )(boardSize, data)\r\n);\r\n\r\nexport default React.createClass({\r\n  propTypes: {\r\n    size: React.PropTypes.number.isRequired,\r\n    data: React.PropTypes.arrayOf(\r\n      React.PropTypes.shape({\r\n        id: React.PropTypes.number.isRequired,\r\n        mark: React.PropTypes.string.isRequired,\r\n        bgColor: React.PropTypes.string.isRequired,\r\n      })\r\n    ),\r\n    onPlaceMarkTrigger: React.PropTypes.func,\r\n  },\r\n\r\n  getDefaultProps() {\r\n    return {\r\n      onPlaceMarkTrigger: () => {},\r\n    };\r\n  },\r\n\r\n  render() {\r\n    const { size, data } = this.props;\r\n\r\n    return (\r\n      <div\r\n          onClick={this.handleClick}\r\n          className=\"board-container\"\r\n          style={{\r\n            boxSizing: 'border-box',\r\n            margin: 0,\r\n            padding: 0,\r\n            border: '1px solid #555',\r\n            display: 'inline-block',\r\n            backgroundColor: '#f00',\r\n          }}>\r\n        {createRowNodes(size, data)}\r\n      </div>\r\n    );\r\n  },\r\n\r\n  handleClick(event) {\r\n    const { onPlaceMarkTrigger } = this.props;\r\n\r\n    // INFO event target could be only our cell container so no need for filtering for now\r\n    const targetId = event.target.id;\r\n\r\n    // 'cell-7' > '7'\r\n    const cellId = Number(targetId.match(/\\d+$/)[0]);\r\n\r\n    onPlaceMarkTrigger(cellId);\r\n  },\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/components/board.js\n **/"],"sourceRoot":""}